{"ast":null,"code":"import _defineProperty from\"/home/amad/Videos/supplyChain/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/home/amad/Videos/supplyChain/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/amad/Videos/supplyChain/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import update from\"immutability-helper\";import{UNIT_PRICE_A,UNIT_PRICE_B}from\"./constants.js\";import{STORAGE_UNIT_COST_A,STORAGE_UNIT_COST_B,STORAGE_UNIT_COST_C}from\"./constants\";import companyCatalogue from\"./constants.js\";export var Core=/*#__PURE__*/function(){function Core(){_classCallCheck(this,Core);this.weeks=[];}_createClass(Core,[{key:\"createWeek\",value:function createWeek(){return{simInput:{demands:{a:0,b:0,c:0},sells:{a:0,b:0,c:0},orders:[{supplierId:\"KW\",a:0,b:0,c:0},{supplierId:\"WWR\",a:0,b:0,c:0},{supplierId:\"ADD\",a:0,b:0,c:0},{supplierId:\"IP\",a:0,b:0,c:0},{supplierId:\"DP\",a:0,b:0,c:0}]},simOutput:{weekStart:{stockA:0,stockB:0,stockC:0},weekEnd:{stockA:0,stockB:0,stockC:0},results:{income:0,storageCost:0,ordersCost:0,profit:0,accumulatedProfit:0}}};}},{key:\"updateIncome\",value:function updateIncome(newState,sellsA,sellsB){var newIncome=sellsA*UNIT_PRICE_A+sellsB*UNIT_PRICE_B;return update(newState,{week:{simOutput:{results:{income:{$set:newIncome}}}}});}},{key:\"updateWeekendStock\",value:function updateWeekendStock(newState,startStock,sells){return update(newState,{week:{simOutput:{weekEnd:{$set:{stockA:startStock.stockA-sells.a,stockB:startStock.stockB-sells.b,stockC:startStock.stockC-sells.c}}}}});}},{key:\"updateStorageCost\",value:function updateStorageCost(newState,weekstartStock,weekendStock){var weeklyStorageCost1=(weekstartStock.stockA+weekendStock.stockA)/2*STORAGE_UNIT_COST_A;var weeklyStorageCost2=(weekstartStock.stockB+weekendStock.stockB)/2*STORAGE_UNIT_COST_B;var weeklyStorageCost3=(weekstartStock.stockC+weekendStock.stockC)/2*STORAGE_UNIT_COST_C;var totalWeeklyStorageCost=(weeklyStorageCost1+weeklyStorageCost2+weeklyStorageCost3).toFixed(2);return update(newState,{week:{simOutput:{results:{storageCost:{$set:totalWeeklyStorageCost}}}}});}},{key:\"updateProfit\",value:function updateProfit(newState){var income=newState.week.simOutput.results.income;var totalWeeklyStorageCost=newState.week.simOutput.results.storageCost;var totalOrderCost=newState.week.simOutput.results.ordersCost;var profit=income-totalWeeklyStorageCost-totalOrderCost;return update(newState,{week:{simOutput:{results:{profit:{$set:profit}}}}});}},{key:\"currentWeekIndex\",value:function currentWeekIndex(){return this.weeks.length-1+1/* current week is not pushed yet */-1/* previous week */;}},{key:\"updateAccumulatedProfit\",value:function updateAccumulatedProfit(newState){// Compute the accumulated profit\nvar index=this.currentWeekIndex();var cumulativeProfit;console.log(index);if(index>=0){cumulativeProfit=newState.week.simOutput.results.profit+this.weeks[index].simOutput.results.accumulatedProfit;}else{cumulativeProfit=newState.week.simOutput.results.profit;}return update(newState,{week:{simOutput:{results:{accumulatedProfit:{$set:cumulativeProfit}}}}});}},{key:\"updateProfitSubTree\",value:function updateProfitSubTree(newState){return this.updateAccumulatedProfit(this.updateProfit(newState));}},{key:\"updateSells\",value:function updateSells(state,event){var sells=state.week.simInput.sells;var sellsProduct2=event.name===\"A\"?sells.b:sells.a;var sellsProduct1=isNaN(parseInt(event.value))?0:parseInt(event.value);// Update the state with the new input.\nvar newState=update(state,{week:{simInput:{sells:_defineProperty({},event.name.toLowerCase(),{$set:sellsProduct1})}}});// Compute the new sells of C and update the state.\nnewState=update(newState,{week:{simInput:{sells:{c:{$set:sellsProduct1+sellsProduct2}}}}});// Compute and update the new income.\n// TODO: Error check (=IF(OR((G4>E4),(H4>F4)),\"ERROR\",G4*$'Prix de vente'.$A$2+H4*$'Prix de vente'.$B$2))\nnewState=event.name===\"A\"?this.updateIncome(newState,sellsProduct1,sellsProduct2):this.updateIncome(newState,sellsProduct2,sellsProduct1);// Update week end stock.\nvar startStock=newState.week.simOutput.weekStart;newState=this.updateWeekendStock(newState,startStock,newState.week.simInput.sells);// Compute the storage cost.\nnewState=this.updateStorageCost(newState,newState.week.simOutput.weekStart,newState.week.simOutput.weekEnd);// Compute the profit and accumulated profit\nnewState=this.updateProfitSubTree(newState);return newState;}},{key:\"updateDemands\",value:function updateDemands(state,event){var demandsProduct1=isNaN(parseInt(event.value))?0:parseInt(event.value);// Update the state with the new input.\nvar newState=update(state,{week:{simInput:{demands:_defineProperty({},event.name.toLowerCase(),{$set:demandsProduct1})}}});return newState;}},{key:\"updateOrders\",value:function updateOrders(state,event){var supplierId=state.supplier.info.id;var indexSupplier=state.week.simInput.orders.findIndex(function(ele){return ele.supplierId===supplierId;});var value=isNaN(parseInt(event.value))?0:parseInt(event.value);// Update the state with the new input.\nvar newState=update(state,{week:{simInput:{orders:_defineProperty({},indexSupplier,_defineProperty({},event.name.toLowerCase(),{$set:value}))}}});// Compute the net order cost of units for KW excluding the shipping cost\nvar computedOrderCostForAKW=0;var computedOrderCostForBKW=0;var computedShippingCostByKW=0;var computedShippingCostByWWR=0;var orderCostFromADD=0;var orderCostFromIP=0;var orderCostFromDP=0;var receptionCostForKW=0;var receptionCostForWWR=0;var receptionCostForADD=0;var receptionCostForIP=0;var receptionCostForDP=0;var new_OrderCost_AWWR=0;var new_OrderCost_BWWR=0;var new_OrderCost_CWWR=0;var new_OrderCost_ABCWWR=0;var new_OrderCost_AKW=0;var new_OrderCost_BKW=0;var new_OrderCost_CKW=0;var new_OrderCost_ABCKW=0;if(newState.week.simInput.orders[0].a>companyCatalogue.KW.DISCOUNT_UNIT_THRESHOLD){new_OrderCost_AKW=newState.week.simInput.orders[0].a*companyCatalogue.KW.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;//computedOrderCostForAKW =\n//companyCatalogue.KW.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n}else{new_OrderCost_AKW=newState.week.simInput.orders[0].a*companyCatalogue.KW.UNIT_PRICE_A_BELOW_DISCOUNT_THRESHOLD;//computedOrderCostForAKW =\n//companyCatalogue.KW.UNIT_PRICE_A_BELOW_DISCOUNT_THRESHOLD;\n}if(newState.week.simInput.orders[0].b>companyCatalogue.KW.DISCOUNT_UNIT_THRESHOLD){new_OrderCost_BKW=newState.week.simInput.orders[0].b*companyCatalogue.KW.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;//computedOrderCostForBKW =\n//companyCatalogue.KW.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n}else{new_OrderCost_BKW=newState.week.simInput.orders[0].b*companyCatalogue.KW.UNIT_PRICE_B_BELOW_DISCOUNT_THRESHOLD;//computedOrderCostForBKW =\n//companyCatalogue.KW.UNIT_PRICE_B_BELOW_DISCOUNT_THRESHOLD;\n}new_OrderCost_CKW=newState.week.simInput.orders[0].c*companyCatalogue.KW.UNIT_PRICE_C_BELOW_DISCOUNT_THRESHOLD;new_OrderCost_ABCKW=new_OrderCost_AKW+new_OrderCost_BKW+new_OrderCost_CKW;// Compute the shipping cost for KW\nif(newState.week.simInput.orders[0].a+newState.week.simInput.orders[0].c>0){if(new_OrderCost_ABCKW>companyCatalogue.KW.FREE_SHIPPING_THRESHOLD){//state.week.simInput.orders[0].a * computedOrderCostForAKW +\n//state.week.simInput.orders[0].b * computedOrderCostForBKW +\n//state.week.simInput.orders[0].c *\n//companyCatalogue.KW.UNIT_PRICE_C_BELOW_DISCOUNT_THRESHOLD >\n//companyCatalogue.KW.FREE_SHIPPING_THRESHOLD\n//) {\ncomputedShippingCostByKW=0;}else computedShippingCostByKW=companyCatalogue.KW.TYPICAL_SHIPPING_COST;}else{computedShippingCostByKW=0;}/////adel\nnew_OrderCost_AWWR=newState.week.simInput.orders[1].a*companyCatalogue.WWR.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;new_OrderCost_BWWR=newState.week.simInput.orders[1].b*companyCatalogue.WWR.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;new_OrderCost_CWWR=newState.week.simInput.orders[1].c*companyCatalogue.WWR.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD;new_OrderCost_ABCWWR=new_OrderCost_AWWR+new_OrderCost_BWWR+new_OrderCost_CWWR;// Compute the shipping cost for WWR\nif(newState.week.simInput.orders[1].a+newState.week.simInput.orders[1].c>0){if(new_OrderCost_ABCWWR>companyCatalogue.WWR.FREE_SHIPPING_THRESHOLD//state.week.simInput.orders[1].a *\n//companyCatalogue.WWR.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD +\n//state.week.simInput.orders[1].b *\n//companyCatalogue.WWR.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD +\n//state.week.simInput.orders[1].c *\n//companyCatalogue.WWR.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD >\n//companyCatalogue.WWR.FREE_SHIPPING_THRESHOLD\n){computedShippingCostByWWR=0;}else{computedShippingCostByWWR=companyCatalogue.WWR.TYPICAL_SHIPPING_COST;}}else{computedShippingCostByWWR=0;}// Compute the net oder cost of units for ADD, IP, and DP respectively, excluding the shipping cost\norderCostFromADD=newState.week.simInput.orders[2].a*companyCatalogue.ADD.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;orderCostFromIP=newState.week.simInput.orders[3].b*companyCatalogue.IP.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;orderCostFromDP=newState.week.simInput.orders[4].c*companyCatalogue.DP.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD;// Compute the reception cost for KW, WWR, ADD, IP, and DP respectively\nif(newState.week.simInput.orders[0].a+newState.week.simInput.orders[0].c>0){receptionCostForKW=companyCatalogue.KW.RECEPTION_COST;}if(newState.week.simInput.orders[1].a+newState.week.simInput.orders[1].c>0){receptionCostForWWR=companyCatalogue.WWR.RECEPTION_COST;}if(newState.week.simInput.orders[2].a>0){receptionCostForADD=companyCatalogue.ADD.RECEPTION_COST;}if(newState.week.simInput.orders[3].b>0){receptionCostForIP=companyCatalogue.IP.RECEPTION_COST;}if(newState.week.simInput.orders[4].c>0){receptionCostForDP=companyCatalogue.DP.RECEPTION_COST;}var totalOrderCost=new_OrderCost_ABCKW+new_OrderCost_ABCWWR+computedShippingCostByKW+computedShippingCostByWWR+orderCostFromADD+orderCostFromIP+orderCostFromDP+receptionCostForKW+receptionCostForWWR+receptionCostForADD+receptionCostForIP+receptionCostForDP;newState=update(newState,{week:{simOutput:{results:{ordersCost:{$set:totalOrderCost}}}}});// update the profit and accumulated profit\nnewState=this.updateProfitSubTree(newState);return newState;}},{key:\"simulate\",value:function simulate(state,event){if(event.action===\"Sells\"){return this.updateSells(state,event);}else if(event.action===\"Demands\"){return this.updateDemands(state,event);}else if(event.action===\"Orders\"){return this.updateOrders(state,event);}else return{};}},{key:\"supplierSelected\",value:function supplierSelected(state,supplier){var newState=update(state,{supplier:{info:{$set:supplier}}});if(supplier.id===\"ADD\")newState=update(newState,{supplier:{enabledOrders:{$set:{a:true,b:false,c:false}}}});else if(supplier.id===\"IP\")newState=update(newState,{supplier:{enabledOrders:{$set:{a:false,b:true,c:false}}}});else if(supplier.id===\"DP\")newState=update(newState,{supplier:{enabledOrders:{$set:{a:false,b:false,c:true}}}});else newState=update(newState,{supplier:{enabledOrders:{$set:{a:true,b:true,c:true}}}});return newState;}},{key:\"initWeek\",value:function initWeek(){return this.createWeek();}},{key:\"updateWeekstartSupplier\",value:function updateWeekstartSupplier(newState,deliveryTime,supplierId,includeWeekend){var index=this.currentWeekIndex()-deliveryTime;if(index>=0){var orders=this.weeks[index].simInput.orders.find(function(ele){return ele.supplierId===supplierId;});var _ref=includeWeekend===true?this.weeks[index].simOutput.weekEnd:{stockA:0,stockB:0,stockC:0},stockA=_ref.stockA,stockB=_ref.stockB,stockC=_ref.stockC;return update(newState,{week:{simOutput:{weekStart:{$set:{stockA:newState.week.simOutput.weekStart.stockA+orders.a+stockA,stockB:newState.week.simOutput.weekStart.stockB+orders.b+stockB,stockC:newState.week.simOutput.weekStart.stockC+orders.c+stockC}}}}});}return newState;}},{key:\"updateWeekstartStock\",value:function updateWeekstartStock(newWeek){var week=this.updateWeekstartSupplier({week:newWeek},0,\"ADD\",true).week;week=this.updateWeekstartSupplier({week:week},0,\"IP\",false).week;week=this.updateWeekstartSupplier({week:week},0,\"DP\",false).week;week=this.updateWeekstartSupplier({week:week},4,\"WWR\",false).week;week=this.updateWeekstartSupplier({week:week},1,\"KW\",false).week;return week;}},{key:\"advanceSimulation\",value:function advanceSimulation(week){// Store this week\nthis.weeks.push(week);// Create and update the next week\nvar newWeek=this.createWeek();newWeek=this.updateWeekstartStock(newWeek);newWeek=this.updateWeekendStock({week:newWeek},newWeek.simOutput.weekStart,newWeek.simInput.sells).week;newWeek=this.updateStorageCost({week:newWeek},newWeek.simOutput.weekStart,newWeek.simOutput.weekEnd).week;// Compute the profit and accumulated profit\nnewWeek=this.updateProfitSubTree({week:newWeek}).week;console.log(this.weeks);return newWeek;}}]);return Core;}();","map":{"version":3,"sources":["/home/amad/Videos/supplyChain/src/core/simulate.js"],"names":["update","UNIT_PRICE_A","UNIT_PRICE_B","STORAGE_UNIT_COST_A","STORAGE_UNIT_COST_B","STORAGE_UNIT_COST_C","companyCatalogue","Core","weeks","simInput","demands","a","b","c","sells","orders","supplierId","simOutput","weekStart","stockA","stockB","stockC","weekEnd","results","income","storageCost","ordersCost","profit","accumulatedProfit","newState","sellsA","sellsB","newIncome","week","$set","startStock","weekstartStock","weekendStock","weeklyStorageCost1","weeklyStorageCost2","weeklyStorageCost3","totalWeeklyStorageCost","toFixed","totalOrderCost","length","index","currentWeekIndex","cumulativeProfit","console","log","updateAccumulatedProfit","updateProfit","state","event","sellsProduct2","name","sellsProduct1","isNaN","parseInt","value","toLowerCase","updateIncome","updateWeekendStock","updateStorageCost","updateProfitSubTree","demandsProduct1","supplier","info","id","indexSupplier","findIndex","ele","computedOrderCostForAKW","computedOrderCostForBKW","computedShippingCostByKW","computedShippingCostByWWR","orderCostFromADD","orderCostFromIP","orderCostFromDP","receptionCostForKW","receptionCostForWWR","receptionCostForADD","receptionCostForIP","receptionCostForDP","new_OrderCost_AWWR","new_OrderCost_BWWR","new_OrderCost_CWWR","new_OrderCost_ABCWWR","new_OrderCost_AKW","new_OrderCost_BKW","new_OrderCost_CKW","new_OrderCost_ABCKW","KW","DISCOUNT_UNIT_THRESHOLD","UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD","UNIT_PRICE_A_BELOW_DISCOUNT_THRESHOLD","UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD","UNIT_PRICE_B_BELOW_DISCOUNT_THRESHOLD","UNIT_PRICE_C_BELOW_DISCOUNT_THRESHOLD","FREE_SHIPPING_THRESHOLD","TYPICAL_SHIPPING_COST","WWR","UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD","ADD","IP","DP","RECEPTION_COST","action","updateSells","updateDemands","updateOrders","enabledOrders","createWeek","deliveryTime","includeWeekend","find","newWeek","updateWeekstartSupplier","push","updateWeekstartStock"],"mappings":"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","sourcesContent":["import update from \"immutability-helper\";\nimport { UNIT_PRICE_A, UNIT_PRICE_B } from \"./constants.js\";\nimport {\n  STORAGE_UNIT_COST_A,\n  STORAGE_UNIT_COST_B,\n  STORAGE_UNIT_COST_C,\n} from \"./constants\";\nimport companyCatalogue from \"./constants.js\";\n\nexport class Core {\n  constructor() {\n    this.weeks = [];\n  }\n\n  createWeek() {\n    return {\n      simInput: {\n        demands: { a: 0, b: 0, c: 0 },\n        sells: { a: 0, b: 0, c: 0 },\n        orders: [\n          { supplierId: \"KW\", a: 0, b: 0, c: 0 },\n          { supplierId: \"WWR\", a: 0, b: 0, c: 0 },\n          { supplierId: \"ADD\", a: 0, b: 0, c: 0 },\n          { supplierId: \"IP\", a: 0, b: 0, c: 0 },\n          { supplierId: \"DP\", a: 0, b: 0, c: 0 },\n        ],\n      },\n      simOutput: {\n        weekStart: {\n          stockA: 0,\n          stockB: 0,\n          stockC: 0,\n        },\n        weekEnd: {\n          stockA: 0,\n          stockB: 0,\n          stockC: 0,\n        },\n        results: {\n          income: 0,\n          storageCost: 0,\n          ordersCost: 0,\n          profit: 0,\n          accumulatedProfit: 0,\n        },\n      },\n    };\n  }\n\n  updateIncome(newState, sellsA, sellsB) {\n    const newIncome = sellsA * UNIT_PRICE_A + sellsB * UNIT_PRICE_B;\n\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: {\n            income: {\n              $set: newIncome,\n            },\n          },\n        },\n      },\n    });\n  }\n\n  updateWeekendStock(newState, startStock, sells) {\n    return update(newState, {\n      week: {\n        simOutput: {\n          weekEnd: {\n            $set: {\n              stockA: startStock.stockA - sells.a,\n              stockB: startStock.stockB - sells.b,\n              stockC: startStock.stockC - sells.c,\n            },\n          },\n        },\n      },\n    });\n  }\n\n  updateStorageCost(newState, weekstartStock, weekendStock) {\n    const weeklyStorageCost1 =\n      ((weekstartStock.stockA + weekendStock.stockA) / 2) * STORAGE_UNIT_COST_A;\n    const weeklyStorageCost2 =\n      ((weekstartStock.stockB + weekendStock.stockB) / 2) * STORAGE_UNIT_COST_B;\n    const weeklyStorageCost3 =\n      ((weekstartStock.stockC + weekendStock.stockC) / 2) * STORAGE_UNIT_COST_C;\n    const totalWeeklyStorageCost = (\n      weeklyStorageCost1 +\n      weeklyStorageCost2 +\n      weeklyStorageCost3\n    ).toFixed(2);\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: { storageCost: { $set: totalWeeklyStorageCost } },\n        },\n      },\n    });\n  }\n\n  updateProfit(newState) {\n    const income = newState.week.simOutput.results.income;\n    const totalWeeklyStorageCost = newState.week.simOutput.results.storageCost;\n    const totalOrderCost = newState.week.simOutput.results.ordersCost;\n    const profit = income - totalWeeklyStorageCost - totalOrderCost;\n\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: { profit: { $set: profit } },\n        },\n      },\n    });\n  }\n\n  currentWeekIndex() {\n    return (\n      this.weeks.length -\n      1 +\n      1 /* current week is not pushed yet */ -\n      1 /* previous week */\n    );\n  }\n\n  updateAccumulatedProfit(newState) {\n    // Compute the accumulated profit\n    const index = this.currentWeekIndex();\n    let cumulativeProfit;\n    console.log(index);\n    if (index >= 0) {\n      cumulativeProfit =\n        newState.week.simOutput.results.profit +\n        this.weeks[index].simOutput.results.accumulatedProfit;\n    } else {\n      cumulativeProfit = newState.week.simOutput.results.profit;\n    }\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: { accumulatedProfit: { $set: cumulativeProfit } },\n        },\n      },\n    });\n  }\n\n  updateProfitSubTree(newState) {\n    return this.updateAccumulatedProfit(this.updateProfit(newState));\n  }\n\n  updateSells(state, event) {\n    const sells = state.week.simInput.sells;\n    const sellsProduct2 = event.name === \"A\" ? sells.b : sells.a;\n    const sellsProduct1 = isNaN(parseInt(event.value))\n      ? 0\n      : parseInt(event.value);\n\n    // Update the state with the new input.\n    let newState = update(state, {\n      week: {\n        simInput: {\n          sells: {\n            [event.name.toLowerCase()]: {\n              $set: sellsProduct1,\n            },\n          },\n        },\n      },\n    });\n\n    // Compute the new sells of C and update the state.\n    newState = update(newState, {\n      week: {\n        simInput: {\n          sells: {\n            c: {\n              $set: sellsProduct1 + sellsProduct2,\n            },\n          },\n        },\n      },\n    });\n\n    // Compute and update the new income.\n    // TODO: Error check (=IF(OR((G4>E4),(H4>F4)),\"ERROR\",G4*$'Prix de vente'.$A$2+H4*$'Prix de vente'.$B$2))\n    newState =\n      event.name === \"A\"\n        ? this.updateIncome(newState, sellsProduct1, sellsProduct2)\n        : this.updateIncome(newState, sellsProduct2, sellsProduct1);\n\n    // Update week end stock.\n    const startStock = newState.week.simOutput.weekStart;\n    newState = this.updateWeekendStock(\n      newState,\n      startStock,\n      newState.week.simInput.sells\n    );\n\n    // Compute the storage cost.\n    newState = this.updateStorageCost(\n      newState,\n      newState.week.simOutput.weekStart,\n      newState.week.simOutput.weekEnd\n    );\n\n    // Compute the profit and accumulated profit\n    newState = this.updateProfitSubTree(newState);\n\n    return newState;\n  }\n\n  updateDemands(state, event) {\n    const demandsProduct1 = isNaN(parseInt(event.value))\n      ? 0\n      : parseInt(event.value);\n\n    // Update the state with the new input.\n    let newState = update(state, {\n      week: {\n        simInput: {\n          demands: {\n            [event.name.toLowerCase()]: {\n              $set: demandsProduct1,\n            },\n          },\n        },\n      },\n    });\n\n    return newState;\n  }\n\n  updateOrders(state, event) {\n    const supplierId = state.supplier.info.id;\n    const indexSupplier = state.week.simInput.orders.findIndex(\n      (ele) => ele.supplierId === supplierId\n    );\n    const value = isNaN(parseInt(event.value)) ? 0 : parseInt(event.value);\n\n    // Update the state with the new input.\n    let newState = update(state, {\n      week: {\n        simInput: {\n          orders: {\n            [indexSupplier]: {\n              [event.name.toLowerCase()]: { $set: value },\n            },\n          },\n        },\n      },\n    });\n\n    // Compute the net order cost of units for KW excluding the shipping cost\n    let computedOrderCostForAKW = 0;\n    let computedOrderCostForBKW = 0;\n    let computedShippingCostByKW = 0;\n    let computedShippingCostByWWR = 0;\n    let orderCostFromADD = 0;\n    let orderCostFromIP = 0;\n    let orderCostFromDP = 0;\n    let receptionCostForKW = 0;\n    let receptionCostForWWR = 0;\n    let receptionCostForADD = 0;\n    let receptionCostForIP = 0;\n    let receptionCostForDP = 0;\n\n    let new_OrderCost_AWWR = 0;\n    let new_OrderCost_BWWR = 0;\n    let new_OrderCost_CWWR = 0;\n    let new_OrderCost_ABCWWR = 0;\n    let new_OrderCost_AKW = 0;\n    let new_OrderCost_BKW = 0;\n    let new_OrderCost_CKW = 0;\n    let new_OrderCost_ABCKW = 0;\n\n    if (\n      newState.week.simInput.orders[0].a >\n      companyCatalogue.KW.DISCOUNT_UNIT_THRESHOLD\n    ) {\n      new_OrderCost_AKW =\n      newState.week.simInput.orders[0].a *\n        companyCatalogue.KW.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n      //computedOrderCostForAKW =\n      //companyCatalogue.KW.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n    } else {\n      new_OrderCost_AKW =\n      newState.week.simInput.orders[0].a *\n        companyCatalogue.KW.UNIT_PRICE_A_BELOW_DISCOUNT_THRESHOLD;\n      //computedOrderCostForAKW =\n      //companyCatalogue.KW.UNIT_PRICE_A_BELOW_DISCOUNT_THRESHOLD;\n    }\n\n    if (\n      newState.week.simInput.orders[0].b >\n      companyCatalogue.KW.DISCOUNT_UNIT_THRESHOLD\n    ) {\n      new_OrderCost_BKW =\n      newState.week.simInput.orders[0].b *\n        companyCatalogue.KW.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n      //computedOrderCostForBKW =\n      //companyCatalogue.KW.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n    } else {\n      new_OrderCost_BKW =\n      newState.week.simInput.orders[0].b *\n        companyCatalogue.KW.UNIT_PRICE_B_BELOW_DISCOUNT_THRESHOLD;\n      //computedOrderCostForBKW =\n      //companyCatalogue.KW.UNIT_PRICE_B_BELOW_DISCOUNT_THRESHOLD;\n    }\n    new_OrderCost_CKW =\n    newState.week.simInput.orders[0].c *\n      companyCatalogue.KW.UNIT_PRICE_C_BELOW_DISCOUNT_THRESHOLD;\n    new_OrderCost_ABCKW =\n      new_OrderCost_AKW + new_OrderCost_BKW + new_OrderCost_CKW;\n    // Compute the shipping cost for KW\n    if (newState.week.simInput.orders[0].a + newState.week.simInput.orders[0].c > 0) {\n      if (new_OrderCost_ABCKW > companyCatalogue.KW.FREE_SHIPPING_THRESHOLD) {\n        //state.week.simInput.orders[0].a * computedOrderCostForAKW +\n        //state.week.simInput.orders[0].b * computedOrderCostForBKW +\n        //state.week.simInput.orders[0].c *\n        //companyCatalogue.KW.UNIT_PRICE_C_BELOW_DISCOUNT_THRESHOLD >\n        //companyCatalogue.KW.FREE_SHIPPING_THRESHOLD\n        //) {\n        computedShippingCostByKW = 0;\n      } else\n        computedShippingCostByKW = companyCatalogue.KW.TYPICAL_SHIPPING_COST;\n    } else {\n      computedShippingCostByKW = 0;\n    }\n/////adel\n    new_OrderCost_AWWR =\n    newState.week.simInput.orders[1].a *\n      companyCatalogue.WWR.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n    new_OrderCost_BWWR =\n    newState.week.simInput.orders[1].b *\n      companyCatalogue.WWR.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n    new_OrderCost_CWWR =\n    newState.week.simInput.orders[1].c *\n      companyCatalogue.WWR.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD;\n    new_OrderCost_ABCWWR =\n      new_OrderCost_AWWR + new_OrderCost_BWWR + new_OrderCost_CWWR;\n\n    // Compute the shipping cost for WWR\n    if (newState.week.simInput.orders[1].a + newState.week.simInput.orders[1].c > 0) {\n      if (\n        new_OrderCost_ABCWWR > companyCatalogue.WWR.FREE_SHIPPING_THRESHOLD\n        //state.week.simInput.orders[1].a *\n        //companyCatalogue.WWR.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD +\n        //state.week.simInput.orders[1].b *\n        //companyCatalogue.WWR.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD +\n        //state.week.simInput.orders[1].c *\n        //companyCatalogue.WWR.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD >\n        //companyCatalogue.WWR.FREE_SHIPPING_THRESHOLD\n      ) {\n        computedShippingCostByWWR = 0;\n      } else {\n        computedShippingCostByWWR = companyCatalogue.WWR.TYPICAL_SHIPPING_COST;\n      }\n    } else {\n      computedShippingCostByWWR = 0;\n    }\n\n    // Compute the net oder cost of units for ADD, IP, and DP respectively, excluding the shipping cost\n    orderCostFromADD =\n    newState.week.simInput.orders[2].a *\n      companyCatalogue.ADD.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n    orderCostFromIP =\n    newState.week.simInput.orders[3].b *\n      companyCatalogue.IP.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n    orderCostFromDP =\n    newState.week.simInput.orders[4].c *\n      companyCatalogue.DP.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD;\n\n    // Compute the reception cost for KW, WWR, ADD, IP, and DP respectively\n    if (newState.week.simInput.orders[0].a + newState.week.simInput.orders[0].c > 0) {\n      receptionCostForKW = companyCatalogue.KW.RECEPTION_COST;\n    }\n    if (newState.week.simInput.orders[1].a + newState.week.simInput.orders[1].c > 0) {\n      receptionCostForWWR = companyCatalogue.WWR.RECEPTION_COST;\n    }\n    if (newState.week.simInput.orders[2].a > 0) {\n      receptionCostForADD = companyCatalogue.ADD.RECEPTION_COST;\n    }\n    if (newState.week.simInput.orders[3].b > 0) {\n      receptionCostForIP = companyCatalogue.IP.RECEPTION_COST;\n    }\n    if (newState.week.simInput.orders[4].c > 0) {\n      receptionCostForDP = companyCatalogue.DP.RECEPTION_COST;\n    }\n    const totalOrderCost =\n      new_OrderCost_ABCKW +\n      new_OrderCost_ABCWWR +\n      computedShippingCostByKW +\n      computedShippingCostByWWR +\n      orderCostFromADD +\n      orderCostFromIP +\n      orderCostFromDP +\n      receptionCostForKW +\n      receptionCostForWWR +\n      receptionCostForADD +\n      receptionCostForIP +\n      receptionCostForDP;\n\n    newState = update(newState, {\n      week: {\n        simOutput: {\n          results: { ordersCost: { $set: totalOrderCost } },\n        },\n      },\n    });\n\n    // update the profit and accumulated profit\n    newState = this.updateProfitSubTree(newState);\n\n    return newState;\n  }\n\n  simulate(state, event) {\n    if (event.action === \"Sells\") {\n      return this.updateSells(state, event);\n    } else if (event.action === \"Demands\") {\n      return this.updateDemands(state, event);\n    } else if (event.action === \"Orders\") {\n      return this.updateOrders(state, event);\n    } else return {};\n  }\n\n  supplierSelected(state, supplier) {\n    let newState = update(state, { supplier: { info: { $set: supplier } } });\n    if (supplier.id === \"ADD\")\n      newState = update(newState, {\n        supplier: { enabledOrders: { $set: { a: true, b: false, c: false } } },\n      });\n    else if (supplier.id === \"IP\")\n      newState = update(newState, {\n        supplier: { enabledOrders: { $set: { a: false, b: true, c: false } } },\n      });\n    else if (supplier.id === \"DP\")\n      newState = update(newState, {\n        supplier: { enabledOrders: { $set: { a: false, b: false, c: true } } },\n      });\n    else\n      newState = update(newState, {\n        supplier: { enabledOrders: { $set: { a: true, b: true, c: true } } },\n      });\n\n    return newState;\n  }\n\n  initWeek() {\n    return this.createWeek();\n  }\n\n  updateWeekstartSupplier(newState, deliveryTime, supplierId, includeWeekend) {\n    let index = this.currentWeekIndex() - deliveryTime;\n    if (index >= 0) {\n      const orders = this.weeks[index].simInput.orders.find(\n        (ele) => ele.supplierId === supplierId\n      );\n      const { stockA, stockB, stockC } =\n        includeWeekend === true\n          ? this.weeks[index].simOutput.weekEnd\n          : { stockA: 0, stockB: 0, stockC: 0 };\n\n      return update(newState, {\n        week: {\n          simOutput: {\n            weekStart: {\n              $set: {\n                stockA:\n                  newState.week.simOutput.weekStart.stockA + orders.a + stockA,\n                stockB:\n                  newState.week.simOutput.weekStart.stockB + orders.b + stockB,\n                stockC:\n                  newState.week.simOutput.weekStart.stockC + orders.c + stockC,\n              },\n            },\n          },\n        },\n      });\n    }\n    return newState;\n  }\n\n  updateWeekstartStock(newWeek) {\n    let week = this.updateWeekstartSupplier({ week: newWeek }, 0, \"ADD\", true)\n      .week;\n    week = this.updateWeekstartSupplier({ week: week }, 0, \"IP\", false).week;\n    week = this.updateWeekstartSupplier({ week: week }, 0, \"DP\", false).week;\n    week = this.updateWeekstartSupplier({ week: week }, 4, \"WWR\", false).week;\n    week = this.updateWeekstartSupplier({ week: week }, 1, \"KW\", false).week;\n\n    return week;\n  }\n\n  advanceSimulation(week) {\n    // Store this week\n    this.weeks.push(week);\n\n    // Create and update the next week\n    let newWeek = this.createWeek();\n\n    newWeek = this.updateWeekstartStock(newWeek);\n    newWeek = this.updateWeekendStock(\n      { week: newWeek },\n      newWeek.simOutput.weekStart,\n      newWeek.simInput.sells\n    ).week;\n    newWeek = this.updateStorageCost(\n      { week: newWeek },\n      newWeek.simOutput.weekStart,\n      newWeek.simOutput.weekEnd\n    ).week;\n\n    // Compute the profit and accumulated profit\n    newWeek = this.updateProfitSubTree({ week: newWeek }).week;\n\n    console.log(this.weeks);\n    return newWeek;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}