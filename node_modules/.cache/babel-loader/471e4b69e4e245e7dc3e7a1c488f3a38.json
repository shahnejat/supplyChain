{"ast":null,"code":"import update from \"immutability-helper\";\nimport { UNIT_PRICE_A, UNIT_PRICE_B } from \"./constants.js\";\nimport { STORAGE_UNIT_COST_A, STORAGE_UNIT_COST_B, STORAGE_UNIT_COST_C } from \"./constants\";\nimport companyCatalogue from \"./constants.js\";\nexport class Core {\n  constructor() {\n    this.weeks = [];\n  }\n\n  createWeek() {\n    return {\n      simInput: {\n        demands: {\n          a: 0,\n          b: 0,\n          c: 0\n        },\n        sells: {\n          a: 0,\n          b: 0,\n          c: 0\n        },\n        orders: [{\n          supplierId: \"KW\",\n          a: 0,\n          b: 0,\n          c: 0\n        }, {\n          supplierId: \"WWR\",\n          a: 0,\n          b: 0,\n          c: 0\n        }, {\n          supplierId: \"ADD\",\n          a: 0,\n          b: 0,\n          c: 0\n        }, {\n          supplierId: \"IP\",\n          a: 0,\n          b: 0,\n          c: 0\n        }, {\n          supplierId: \"DP\",\n          a: 0,\n          b: 0,\n          c: 0\n        }]\n      },\n      simOutput: {\n        weekStart: {\n          stockA: 0,\n          stockB: 0,\n          stockC: 0\n        },\n        weekEnd: {\n          stockA: 0,\n          stockB: 0,\n          stockC: 0\n        },\n        results: {\n          income: 0,\n          storageCost: 0,\n          ordersCost: 0,\n          profit: 0,\n          accumulatedProfit: 0\n        }\n      }\n    };\n  }\n\n  updateIncome(newState, sellsA, sellsB) {\n    const newIncome = sellsA * UNIT_PRICE_A + sellsB * UNIT_PRICE_B;\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: {\n            income: {\n              $set: newIncome\n            }\n          }\n        }\n      }\n    });\n  }\n\n  updateWeekendStock(newState, startStock, sells) {\n    return update(newState, {\n      week: {\n        simOutput: {\n          weekEnd: {\n            $set: {\n              stockA: startStock.stockA - sells.a,\n              stockB: startStock.stockB - sells.b,\n              stockC: startStock.stockC - sells.c\n            }\n          }\n        }\n      }\n    });\n  }\n\n  updateStorageCost(newState, weekstartStock, weekendStock) {\n    const weeklyStorageCost1 = (weekstartStock.stockA + weekendStock.stockA) / 2 * STORAGE_UNIT_COST_A;\n    const weeklyStorageCost2 = (weekstartStock.stockB + weekendStock.stockB) / 2 * STORAGE_UNIT_COST_B;\n    const weeklyStorageCost3 = (weekstartStock.stockC + weekendStock.stockC) / 2 * STORAGE_UNIT_COST_C;\n    const totalWeeklyStorageCost = (weeklyStorageCost1 + weeklyStorageCost2 + weeklyStorageCost3).toFixed(2);\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: {\n            storageCost: {\n              $set: totalWeeklyStorageCost\n            }\n          }\n        }\n      }\n    });\n  }\n\n  updateProfit(newState) {\n    const income = newState.week.simOutput.results.income;\n    const totalWeeklyStorageCost = newState.week.simOutput.results.storageCost;\n    const totalOrderCost = newState.week.simOutput.results.ordersCost;\n    const profit = income - totalWeeklyStorageCost - totalOrderCost;\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: {\n            profit: {\n              $set: profit\n            }\n          }\n        }\n      }\n    });\n  }\n\n  currentWeekIndex() {\n    return this.weeks.length - 1 + 1\n    /* current week is not pushed yet */\n    - 1\n    /* previous week */\n    ;\n  }\n\n  updateAccumulatedProfit(newState) {\n    // Compute the accumulated profit\n    const index = this.currentWeekIndex();\n    let cumulativeProfit;\n    console.log(index);\n\n    if (index >= 0) {\n      cumulativeProfit = newState.week.simOutput.results.profit + this.weeks[index].simOutput.results.accumulatedProfit;\n    } else {\n      cumulativeProfit = newState.week.simOutput.results.profit;\n    }\n\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: {\n            accumulatedProfit: {\n              $set: cumulativeProfit\n            }\n          }\n        }\n      }\n    });\n  }\n\n  updateProfitSubTree(newState) {\n    return this.updateAccumulatedProfit(this.updateProfit(newState));\n  }\n\n  updateSells(state, event) {\n    const sells = state.week.simInput.sells;\n    const sellsProduct2 = event.name === \"A\" ? sells.b : sells.a;\n    const sellsProduct1 = isNaN(parseInt(event.value)) ? 0 : parseInt(event.value); // Update the state with the new input.\n\n    let newState = update(state, {\n      week: {\n        simInput: {\n          sells: {\n            [event.name.toLowerCase()]: {\n              $set: sellsProduct1\n            }\n          }\n        }\n      }\n    }); // Compute the new sells of C and update the state.\n\n    newState = update(newState, {\n      week: {\n        simInput: {\n          sells: {\n            c: {\n              $set: sellsProduct1 + sellsProduct2\n            }\n          }\n        }\n      }\n    }); // Compute and update the new income.\n    // TODO: Error check (=IF(OR((G4>E4),(H4>F4)),\"ERROR\",G4*$'Prix de vente'.$A$2+H4*$'Prix de vente'.$B$2))\n\n    newState = event.name === \"A\" ? this.updateIncome(newState, sellsProduct1, sellsProduct2) : this.updateIncome(newState, sellsProduct2, sellsProduct1); // Update week end stock.\n\n    const startStock = newState.week.simOutput.weekStart;\n    newState = this.updateWeekendStock(newState, startStock, newState.week.simInput.sells); // Compute the storage cost.\n\n    newState = this.updateStorageCost(newState, newState.week.simOutput.weekStart, newState.week.simOutput.weekEnd); // Compute the profit and accumulated profit\n\n    newState = this.updateProfitSubTree(newState);\n    return newState;\n  }\n\n  updateDemands(state, event) {\n    const demandsProduct1 = isNaN(parseInt(event.value)) ? 0 : parseInt(event.value); // Update the state with the new input.\n\n    let newState = update(state, {\n      week: {\n        simInput: {\n          demands: {\n            [event.name.toLowerCase()]: {\n              $set: demandsProduct1\n            }\n          }\n        }\n      }\n    });\n    return newState;\n  }\n\n  updateOrders(state, event) {\n    const supplierId = state.supplier.info.id;\n    const indexSupplier = state.week.simInput.orders.findIndex(ele => ele.supplierId === supplierId);\n    const value = isNaN(parseInt(event.value)) ? 0 : parseInt(event.value); // Update the state with the new input.\n\n    let newState = update(state, {\n      week: {\n        simInput: {\n          orders: {\n            [indexSupplier]: {\n              [event.name.toLowerCase()]: {\n                $set: value\n              }\n            }\n          }\n        }\n      }\n    }); // Compute the net order cost of units for KW excluding the shipping cost\n\n    let computedOrderCostForAKW = 0;\n    let computedOrderCostForBKW = 0;\n    let computedShippingCostByKW = 0;\n    let computedShippingCostByWWR = 0;\n    let orderCostFromADD = 0;\n    let orderCostFromIP = 0;\n    let orderCostFromDP = 0;\n    let receptionCostForKW = 0;\n    let receptionCostForWWR = 0;\n    let receptionCostForADD = 0;\n    let receptionCostForIP = 0;\n    let receptionCostForDP = 0;\n    let new_OrderCost_AWWR = 0;\n    let new_OrderCost_BWWR = 0;\n    let new_OrderCost_CWWR = 0;\n    let new_OrderCost_ABCWWR = 0;\n    let new_OrderCost_AKW = 0;\n    let new_OrderCost_BKW = 0;\n    let new_OrderCost_CKW = 0;\n    let new_OrderCost_ABCKW = 0;\n\n    if (newstate.week.simInput.orders[0].a > companyCatalogue.KW.DISCOUNT_UNIT_THRESHOLD) {\n      new_OrderCost_AKW = newstate.week.simInput.orders[0].a * companyCatalogue.KW.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD; //computedOrderCostForAKW =\n      //companyCatalogue.KW.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n    } else {\n      new_OrderCost_AKW = newstate.week.simInput.orders[0].a * companyCatalogue.KW.UNIT_PRICE_A_BELOW_DISCOUNT_THRESHOLD; //computedOrderCostForAKW =\n      //companyCatalogue.KW.UNIT_PRICE_A_BELOW_DISCOUNT_THRESHOLD;\n    }\n\n    if (newstate.week.simInput.orders[0].b > companyCatalogue.KW.DISCOUNT_UNIT_THRESHOLD) {\n      new_OrderCost_BKW = newstate.week.simInput.orders[0].b * companyCatalogue.KW.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD; //computedOrderCostForBKW =\n      //companyCatalogue.KW.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n    } else {\n      new_OrderCost_BKW = newstate.week.simInput.orders[0].b * companyCatalogue.KW.UNIT_PRICE_B_BELOW_DISCOUNT_THRESHOLD; //computedOrderCostForBKW =\n      //companyCatalogue.KW.UNIT_PRICE_B_BELOW_DISCOUNT_THRESHOLD;\n    }\n\n    new_OrderCost_CKW = newstate.week.simInput.orders[0].c * companyCatalogue.KW.UNIT_PRICE_C_BELOW_DISCOUNT_THRESHOLD;\n    new_OrderCost_ABCKW = new_OrderCost_AKW + new_OrderCost_BKW + new_OrderCost_CKW; // Compute the shipping cost for KW\n\n    if (newstate.week.simInput.orders[0].a + newstate.week.simInput.orders[0].c > 0) {\n      if (new_OrderCost_ABCKW > companyCatalogue.KW.FREE_SHIPPING_THRESHOLD) {\n        //state.week.simInput.orders[0].a * computedOrderCostForAKW +\n        //state.week.simInput.orders[0].b * computedOrderCostForBKW +\n        //state.week.simInput.orders[0].c *\n        //companyCatalogue.KW.UNIT_PRICE_C_BELOW_DISCOUNT_THRESHOLD >\n        //companyCatalogue.KW.FREE_SHIPPING_THRESHOLD\n        //) {\n        computedShippingCostByKW = 0;\n      } else computedShippingCostByKW = companyCatalogue.KW.TYPICAL_SHIPPING_COST;\n    } else {\n      computedShippingCostByKW = 0;\n    }\n\n    new_OrderCost_AWWR = newstate.week.simInput.orders[1].a * companyCatalogue.WWR.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n    new_OrderCost_BWWR = newstate.week.simInput.orders[1].b * companyCatalogue.WWR.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n    new_OrderCost_CWWR = newstate.week.simInput.orders[1].c * companyCatalogue.WWR.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD;\n    new_OrderCost_ABCWWR = new_OrderCost_AWWR + new_OrderCost_BWWR + new_OrderCost_CWWR; // Compute the shipping cost for WWR\n\n    if (newstate.week.simInput.orders[1].a + newstate.week.simInput.orders[1].c > 0) {\n      if (new_OrderCost_ABCWWR > companyCatalogue.WWR.FREE_SHIPPING_THRESHOLD //state.week.simInput.orders[1].a *\n      //companyCatalogue.WWR.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD +\n      //state.week.simInput.orders[1].b *\n      //companyCatalogue.WWR.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD +\n      //state.week.simInput.orders[1].c *\n      //companyCatalogue.WWR.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD >\n      //companyCatalogue.WWR.FREE_SHIPPING_THRESHOLD\n      ) {\n          computedShippingCostByWWR = 0;\n        } else {\n        computedShippingCostByWWR = companyCatalogue.WWR.TYPICAL_SHIPPING_COST;\n      }\n    } else {\n      computedShippingCostByWWR = 0;\n    } // Compute the net oder cost of units for ADD, IP, and DP respectively, excluding the shipping cost\n\n\n    orderCostFromADD = newstate.week.simInput.orders[2].a * companyCatalogue.ADD.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n    orderCostFromIP = newstate.week.simInput.orders[3].b * companyCatalogue.IP.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n    orderCostFromDP = newstate.week.simInput.orders[4].c * companyCatalogue.DP.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD; // Compute the reception cost for KW, WWR, ADD, IP, and DP respectively\n\n    if (newstate.week.simInput.orders[0].a + newstate.week.simInput.orders[0].c > 0) {\n      receptionCostForKW = companyCatalogue.KW.RECEPTION_COST;\n    }\n\n    if (newstate.week.simInput.orders[1].a + newstate.week.simInput.orders[1].c > 0) {\n      receptionCostForWWR = companyCatalogue.WWR.RECEPTION_COST;\n    }\n\n    if (newstate.week.simInput.orders[2].a > 0) {\n      receptionCostForADD = companyCatalogue.ADD.RECEPTION_COST;\n    }\n\n    if (newstate.week.simInput.orders[3].b > 0) {\n      receptionCostForIP = companyCatalogue.IP.RECEPTION_COST;\n    }\n\n    if (newstate.week.simInput.orders[4].c > 0) {\n      receptionCostForDP = companyCatalogue.DP.RECEPTION_COST;\n    }\n\n    const totalOrderCost = new_OrderCost_ABCKW + new_OrderCost_ABCWWR + computedShippingCostByKW + computedShippingCostByWWR + orderCostFromADD + orderCostFromIP + orderCostFromDP + receptionCostForKW + receptionCostForWWR + receptionCostForADD + receptionCostForIP + receptionCostForDP;\n    newState = update(newState, {\n      week: {\n        simOutput: {\n          results: {\n            ordersCost: {\n              $set: totalOrderCost\n            }\n          }\n        }\n      }\n    }); // update the profit and accumulated profit\n\n    newState = this.updateProfitSubTree(newState);\n    return newState;\n  }\n\n  simulate(state, event) {\n    if (event.action === \"Sells\") {\n      return this.updateSells(state, event);\n    } else if (event.action === \"Demands\") {\n      return this.updateDemands(state, event);\n    } else if (event.action === \"Orders\") {\n      return this.updateOrders(state, event);\n    } else return {};\n  }\n\n  supplierSelected(state, supplier) {\n    let newState = update(state, {\n      supplier: {\n        info: {\n          $set: supplier\n        }\n      }\n    });\n    if (supplier.id === \"ADD\") newState = update(newState, {\n      supplier: {\n        enabledOrders: {\n          $set: {\n            a: true,\n            b: false,\n            c: false\n          }\n        }\n      }\n    });else if (supplier.id === \"IP\") newState = update(newState, {\n      supplier: {\n        enabledOrders: {\n          $set: {\n            a: false,\n            b: true,\n            c: false\n          }\n        }\n      }\n    });else if (supplier.id === \"DP\") newState = update(newState, {\n      supplier: {\n        enabledOrders: {\n          $set: {\n            a: false,\n            b: false,\n            c: true\n          }\n        }\n      }\n    });else newState = update(newState, {\n      supplier: {\n        enabledOrders: {\n          $set: {\n            a: true,\n            b: true,\n            c: true\n          }\n        }\n      }\n    });\n    return newState;\n  }\n\n  initWeek() {\n    return this.createWeek();\n  }\n\n  updateWeekstartSupplier(newState, deliveryTime, supplierId, includeWeekend) {\n    let index = this.currentWeekIndex() - deliveryTime;\n\n    if (index >= 0) {\n      const orders = this.weeks[index].simInput.orders.find(ele => ele.supplierId === supplierId);\n      const {\n        stockA,\n        stockB,\n        stockC\n      } = includeWeekend === true ? this.weeks[index].simOutput.weekEnd : {\n        stockA: 0,\n        stockB: 0,\n        stockC: 0\n      };\n      return update(newState, {\n        week: {\n          simOutput: {\n            weekStart: {\n              $set: {\n                stockA: newState.week.simOutput.weekStart.stockA + orders.a + stockA,\n                stockB: newState.week.simOutput.weekStart.stockB + orders.b + stockB,\n                stockC: newState.week.simOutput.weekStart.stockC + orders.c + stockC\n              }\n            }\n          }\n        }\n      });\n    }\n\n    return newState;\n  }\n\n  updateWeekstartStock(newWeek) {\n    let week = this.updateWeekstartSupplier({\n      week: newWeek\n    }, 0, \"ADD\", true).week;\n    week = this.updateWeekstartSupplier({\n      week: week\n    }, 0, \"IP\", false).week;\n    week = this.updateWeekstartSupplier({\n      week: week\n    }, 0, \"DP\", false).week;\n    week = this.updateWeekstartSupplier({\n      week: week\n    }, 4, \"WWR\", false).week;\n    week = this.updateWeekstartSupplier({\n      week: week\n    }, 1, \"KW\", false).week;\n    return week;\n  }\n\n  advanceSimulation(week) {\n    // Store this week\n    this.weeks.push(week); // Create and update the next week\n\n    let newWeek = this.createWeek();\n    newWeek = this.updateWeekstartStock(newWeek);\n    newWeek = this.updateWeekendStock({\n      week: newWeek\n    }, newWeek.simOutput.weekStart, newWeek.simInput.sells).week;\n    newWeek = this.updateStorageCost({\n      week: newWeek\n    }, newWeek.simOutput.weekStart, newWeek.simOutput.weekEnd).week; // Compute the profit and accumulated profit\n\n    newWeek = this.updateProfitSubTree({\n      week: newWeek\n    }).week;\n    console.log(this.weeks);\n    return newWeek;\n  }\n\n}","map":{"version":3,"sources":["/home/amad/Downloads/supply_chain/SCG/src/core/simulate.js"],"names":["update","UNIT_PRICE_A","UNIT_PRICE_B","STORAGE_UNIT_COST_A","STORAGE_UNIT_COST_B","STORAGE_UNIT_COST_C","companyCatalogue","Core","constructor","weeks","createWeek","simInput","demands","a","b","c","sells","orders","supplierId","simOutput","weekStart","stockA","stockB","stockC","weekEnd","results","income","storageCost","ordersCost","profit","accumulatedProfit","updateIncome","newState","sellsA","sellsB","newIncome","week","$set","updateWeekendStock","startStock","updateStorageCost","weekstartStock","weekendStock","weeklyStorageCost1","weeklyStorageCost2","weeklyStorageCost3","totalWeeklyStorageCost","toFixed","updateProfit","totalOrderCost","currentWeekIndex","length","updateAccumulatedProfit","index","cumulativeProfit","console","log","updateProfitSubTree","updateSells","state","event","sellsProduct2","name","sellsProduct1","isNaN","parseInt","value","toLowerCase","updateDemands","demandsProduct1","updateOrders","supplier","info","id","indexSupplier","findIndex","ele","computedOrderCostForAKW","computedOrderCostForBKW","computedShippingCostByKW","computedShippingCostByWWR","orderCostFromADD","orderCostFromIP","orderCostFromDP","receptionCostForKW","receptionCostForWWR","receptionCostForADD","receptionCostForIP","receptionCostForDP","new_OrderCost_AWWR","new_OrderCost_BWWR","new_OrderCost_CWWR","new_OrderCost_ABCWWR","new_OrderCost_AKW","new_OrderCost_BKW","new_OrderCost_CKW","new_OrderCost_ABCKW","newstate","KW","DISCOUNT_UNIT_THRESHOLD","UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD","UNIT_PRICE_A_BELOW_DISCOUNT_THRESHOLD","UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD","UNIT_PRICE_B_BELOW_DISCOUNT_THRESHOLD","UNIT_PRICE_C_BELOW_DISCOUNT_THRESHOLD","FREE_SHIPPING_THRESHOLD","TYPICAL_SHIPPING_COST","WWR","UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD","ADD","IP","DP","RECEPTION_COST","simulate","action","supplierSelected","enabledOrders","initWeek","updateWeekstartSupplier","deliveryTime","includeWeekend","find","updateWeekstartStock","newWeek","advanceSimulation","push"],"mappings":"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","sourcesContent":["import update from \"immutability-helper\";\nimport { UNIT_PRICE_A, UNIT_PRICE_B } from \"./constants.js\";\nimport {\n  STORAGE_UNIT_COST_A,\n  STORAGE_UNIT_COST_B,\n  STORAGE_UNIT_COST_C,\n} from \"./constants\";\nimport companyCatalogue from \"./constants.js\";\n\nexport class Core {\n  constructor() {\n    this.weeks = [];\n  }\n\n  createWeek() {\n    return {\n      simInput: {\n        demands: { a: 0, b: 0, c: 0 },\n        sells: { a: 0, b: 0, c: 0 },\n        orders: [\n          { supplierId: \"KW\", a: 0, b: 0, c: 0 },\n          { supplierId: \"WWR\", a: 0, b: 0, c: 0 },\n          { supplierId: \"ADD\", a: 0, b: 0, c: 0 },\n          { supplierId: \"IP\", a: 0, b: 0, c: 0 },\n          { supplierId: \"DP\", a: 0, b: 0, c: 0 },\n        ],\n      },\n      simOutput: {\n        weekStart: {\n          stockA: 0,\n          stockB: 0,\n          stockC: 0,\n        },\n        weekEnd: {\n          stockA: 0,\n          stockB: 0,\n          stockC: 0,\n        },\n        results: {\n          income: 0,\n          storageCost: 0,\n          ordersCost: 0,\n          profit: 0,\n          accumulatedProfit: 0,\n        },\n      },\n    };\n  }\n\n  updateIncome(newState, sellsA, sellsB) {\n    const newIncome = sellsA * UNIT_PRICE_A + sellsB * UNIT_PRICE_B;\n\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: {\n            income: {\n              $set: newIncome,\n            },\n          },\n        },\n      },\n    });\n  }\n\n  updateWeekendStock(newState, startStock, sells) {\n    return update(newState, {\n      week: {\n        simOutput: {\n          weekEnd: {\n            $set: {\n              stockA: startStock.stockA - sells.a,\n              stockB: startStock.stockB - sells.b,\n              stockC: startStock.stockC - sells.c,\n            },\n          },\n        },\n      },\n    });\n  }\n\n  updateStorageCost(newState, weekstartStock, weekendStock) {\n    const weeklyStorageCost1 =\n      ((weekstartStock.stockA + weekendStock.stockA) / 2) * STORAGE_UNIT_COST_A;\n    const weeklyStorageCost2 =\n      ((weekstartStock.stockB + weekendStock.stockB) / 2) * STORAGE_UNIT_COST_B;\n    const weeklyStorageCost3 =\n      ((weekstartStock.stockC + weekendStock.stockC) / 2) * STORAGE_UNIT_COST_C;\n    const totalWeeklyStorageCost = (\n      weeklyStorageCost1 +\n      weeklyStorageCost2 +\n      weeklyStorageCost3\n    ).toFixed(2);\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: { storageCost: { $set: totalWeeklyStorageCost } },\n        },\n      },\n    });\n  }\n\n  updateProfit(newState) {\n    const income = newState.week.simOutput.results.income;\n    const totalWeeklyStorageCost = newState.week.simOutput.results.storageCost;\n    const totalOrderCost = newState.week.simOutput.results.ordersCost;\n    const profit = income - totalWeeklyStorageCost - totalOrderCost;\n\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: { profit: { $set: profit } },\n        },\n      },\n    });\n  }\n\n  currentWeekIndex() {\n    return (\n      this.weeks.length -\n      1 +\n      1 /* current week is not pushed yet */ -\n      1 /* previous week */\n    );\n  }\n\n  updateAccumulatedProfit(newState) {\n    // Compute the accumulated profit\n    const index = this.currentWeekIndex();\n    let cumulativeProfit;\n    console.log(index);\n    if (index >= 0) {\n      cumulativeProfit =\n        newState.week.simOutput.results.profit +\n        this.weeks[index].simOutput.results.accumulatedProfit;\n    } else {\n      cumulativeProfit = newState.week.simOutput.results.profit;\n    }\n    return update(newState, {\n      week: {\n        simOutput: {\n          results: { accumulatedProfit: { $set: cumulativeProfit } },\n        },\n      },\n    });\n  }\n\n  updateProfitSubTree(newState) {\n    return this.updateAccumulatedProfit(this.updateProfit(newState));\n  }\n\n  updateSells(state, event) {\n    const sells = state.week.simInput.sells;\n    const sellsProduct2 = event.name === \"A\" ? sells.b : sells.a;\n    const sellsProduct1 = isNaN(parseInt(event.value))\n      ? 0\n      : parseInt(event.value);\n\n    // Update the state with the new input.\n    let newState = update(state, {\n      week: {\n        simInput: {\n          sells: {\n            [event.name.toLowerCase()]: {\n              $set: sellsProduct1,\n            },\n          },\n        },\n      },\n    });\n\n    // Compute the new sells of C and update the state.\n    newState = update(newState, {\n      week: {\n        simInput: {\n          sells: {\n            c: {\n              $set: sellsProduct1 + sellsProduct2,\n            },\n          },\n        },\n      },\n    });\n\n    // Compute and update the new income.\n    // TODO: Error check (=IF(OR((G4>E4),(H4>F4)),\"ERROR\",G4*$'Prix de vente'.$A$2+H4*$'Prix de vente'.$B$2))\n    newState =\n      event.name === \"A\"\n        ? this.updateIncome(newState, sellsProduct1, sellsProduct2)\n        : this.updateIncome(newState, sellsProduct2, sellsProduct1);\n\n    // Update week end stock.\n    const startStock = newState.week.simOutput.weekStart;\n    newState = this.updateWeekendStock(\n      newState,\n      startStock,\n      newState.week.simInput.sells\n    );\n\n    // Compute the storage cost.\n    newState = this.updateStorageCost(\n      newState,\n      newState.week.simOutput.weekStart,\n      newState.week.simOutput.weekEnd\n    );\n\n    // Compute the profit and accumulated profit\n    newState = this.updateProfitSubTree(newState);\n\n    return newState;\n  }\n\n  updateDemands(state, event) {\n    const demandsProduct1 = isNaN(parseInt(event.value))\n      ? 0\n      : parseInt(event.value);\n\n    // Update the state with the new input.\n    let newState = update(state, {\n      week: {\n        simInput: {\n          demands: {\n            [event.name.toLowerCase()]: {\n              $set: demandsProduct1,\n            },\n          },\n        },\n      },\n    });\n\n    return newState;\n  }\n\n  updateOrders(state, event) {\n    const supplierId = state.supplier.info.id;\n    const indexSupplier = state.week.simInput.orders.findIndex(\n      (ele) => ele.supplierId === supplierId\n    );\n    const value = isNaN(parseInt(event.value)) ? 0 : parseInt(event.value);\n\n    // Update the state with the new input.\n    let newState = update(state, {\n      week: {\n        simInput: {\n          orders: {\n            [indexSupplier]: {\n              [event.name.toLowerCase()]: { $set: value },\n            },\n          },\n        },\n      },\n    });\n\n    // Compute the net order cost of units for KW excluding the shipping cost\n    let computedOrderCostForAKW = 0;\n    let computedOrderCostForBKW = 0;\n    let computedShippingCostByKW = 0;\n    let computedShippingCostByWWR = 0;\n    let orderCostFromADD = 0;\n    let orderCostFromIP = 0;\n    let orderCostFromDP = 0;\n    let receptionCostForKW = 0;\n    let receptionCostForWWR = 0;\n    let receptionCostForADD = 0;\n    let receptionCostForIP = 0;\n    let receptionCostForDP = 0;\n\n    let new_OrderCost_AWWR = 0;\n    let new_OrderCost_BWWR = 0;\n    let new_OrderCost_CWWR = 0;\n    let new_OrderCost_ABCWWR = 0;\n    let new_OrderCost_AKW = 0;\n    let new_OrderCost_BKW = 0;\n    let new_OrderCost_CKW = 0;\n    let new_OrderCost_ABCKW = 0;\n\n    if (\n      newstate.week.simInput.orders[0].a >\n      companyCatalogue.KW.DISCOUNT_UNIT_THRESHOLD\n    ) {\n      new_OrderCost_AKW =\n        newstate.week.simInput.orders[0].a *\n        companyCatalogue.KW.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n      //computedOrderCostForAKW =\n      //companyCatalogue.KW.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n    } else {\n      new_OrderCost_AKW =\n        newstate.week.simInput.orders[0].a *\n        companyCatalogue.KW.UNIT_PRICE_A_BELOW_DISCOUNT_THRESHOLD;\n      //computedOrderCostForAKW =\n      //companyCatalogue.KW.UNIT_PRICE_A_BELOW_DISCOUNT_THRESHOLD;\n    }\n\n    if (\n      newstate.week.simInput.orders[0].b >\n      companyCatalogue.KW.DISCOUNT_UNIT_THRESHOLD\n    ) {\n      new_OrderCost_BKW =\n        newstate.week.simInput.orders[0].b *\n        companyCatalogue.KW.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n      //computedOrderCostForBKW =\n      //companyCatalogue.KW.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n    } else {\n      new_OrderCost_BKW =\n        newstate.week.simInput.orders[0].b *\n        companyCatalogue.KW.UNIT_PRICE_B_BELOW_DISCOUNT_THRESHOLD;\n      //computedOrderCostForBKW =\n      //companyCatalogue.KW.UNIT_PRICE_B_BELOW_DISCOUNT_THRESHOLD;\n    }\n    new_OrderCost_CKW =\n      newstate.week.simInput.orders[0].c *\n      companyCatalogue.KW.UNIT_PRICE_C_BELOW_DISCOUNT_THRESHOLD;\n    new_OrderCost_ABCKW =\n      new_OrderCost_AKW + new_OrderCost_BKW + new_OrderCost_CKW;\n    // Compute the shipping cost for KW\n    if (\n      newstate.week.simInput.orders[0].a + newstate.week.simInput.orders[0].c >\n      0\n    ) {\n      if (new_OrderCost_ABCKW > companyCatalogue.KW.FREE_SHIPPING_THRESHOLD) {\n        //state.week.simInput.orders[0].a * computedOrderCostForAKW +\n        //state.week.simInput.orders[0].b * computedOrderCostForBKW +\n        //state.week.simInput.orders[0].c *\n        //companyCatalogue.KW.UNIT_PRICE_C_BELOW_DISCOUNT_THRESHOLD >\n        //companyCatalogue.KW.FREE_SHIPPING_THRESHOLD\n        //) {\n        computedShippingCostByKW = 0;\n      } else\n        computedShippingCostByKW = companyCatalogue.KW.TYPICAL_SHIPPING_COST;\n    } else {\n      computedShippingCostByKW = 0;\n    }\n\n    new_OrderCost_AWWR =\n      newstate.week.simInput.orders[1].a *\n      companyCatalogue.WWR.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n    new_OrderCost_BWWR =\n      newstate.week.simInput.orders[1].b *\n      companyCatalogue.WWR.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n    new_OrderCost_CWWR =\n      newstate.week.simInput.orders[1].c *\n      companyCatalogue.WWR.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD;\n    new_OrderCost_ABCWWR =\n      new_OrderCost_AWWR + new_OrderCost_BWWR + new_OrderCost_CWWR;\n\n    // Compute the shipping cost for WWR\n    if (\n      newstate.week.simInput.orders[1].a + newstate.week.simInput.orders[1].c >\n      0\n    ) {\n      if (\n        new_OrderCost_ABCWWR > companyCatalogue.WWR.FREE_SHIPPING_THRESHOLD\n        //state.week.simInput.orders[1].a *\n        //companyCatalogue.WWR.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD +\n        //state.week.simInput.orders[1].b *\n        //companyCatalogue.WWR.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD +\n        //state.week.simInput.orders[1].c *\n        //companyCatalogue.WWR.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD >\n        //companyCatalogue.WWR.FREE_SHIPPING_THRESHOLD\n      ) {\n        computedShippingCostByWWR = 0;\n      } else {\n        computedShippingCostByWWR = companyCatalogue.WWR.TYPICAL_SHIPPING_COST;\n      }\n    } else {\n      computedShippingCostByWWR = 0;\n    }\n\n    // Compute the net oder cost of units for ADD, IP, and DP respectively, excluding the shipping cost\n    orderCostFromADD =\n      newstate.week.simInput.orders[2].a *\n      companyCatalogue.ADD.UNIT_PRICE_A_ABOVE_DISCOUNT_THRESHOLD;\n    orderCostFromIP =\n      newstate.week.simInput.orders[3].b *\n      companyCatalogue.IP.UNIT_PRICE_B_ABOVE_DISCOUNT_THRESHOLD;\n    orderCostFromDP =\n      newstate.week.simInput.orders[4].c *\n      companyCatalogue.DP.UNIT_PRICE_C_ABOVE_DISCOUNT_THRESHOLD;\n\n    // Compute the reception cost for KW, WWR, ADD, IP, and DP respectively\n    if (\n      newstate.week.simInput.orders[0].a + newstate.week.simInput.orders[0].c >\n      0\n    ) {\n      receptionCostForKW = companyCatalogue.KW.RECEPTION_COST;\n    }\n    if (\n      newstate.week.simInput.orders[1].a + newstate.week.simInput.orders[1].c >\n      0\n    ) {\n      receptionCostForWWR = companyCatalogue.WWR.RECEPTION_COST;\n    }\n    if (newstate.week.simInput.orders[2].a > 0) {\n      receptionCostForADD = companyCatalogue.ADD.RECEPTION_COST;\n    }\n    if (newstate.week.simInput.orders[3].b > 0) {\n      receptionCostForIP = companyCatalogue.IP.RECEPTION_COST;\n    }\n    if (newstate.week.simInput.orders[4].c > 0) {\n      receptionCostForDP = companyCatalogue.DP.RECEPTION_COST;\n    }\n    const totalOrderCost =\n      new_OrderCost_ABCKW +\n      new_OrderCost_ABCWWR +\n      computedShippingCostByKW +\n      computedShippingCostByWWR +\n      orderCostFromADD +\n      orderCostFromIP +\n      orderCostFromDP +\n      receptionCostForKW +\n      receptionCostForWWR +\n      receptionCostForADD +\n      receptionCostForIP +\n      receptionCostForDP;\n\n    newState = update(newState, {\n      week: {\n        simOutput: {\n          results: { ordersCost: { $set: totalOrderCost } },\n        },\n      },\n    });\n\n    // update the profit and accumulated profit\n    newState = this.updateProfitSubTree(newState);\n\n    return newState;\n  }\n\n  simulate(state, event) {\n    if (event.action === \"Sells\") {\n      return this.updateSells(state, event);\n    } else if (event.action === \"Demands\") {\n      return this.updateDemands(state, event);\n    } else if (event.action === \"Orders\") {\n      return this.updateOrders(state, event);\n    } else return {};\n  }\n\n  supplierSelected(state, supplier) {\n    let newState = update(state, { supplier: { info: { $set: supplier } } });\n    if (supplier.id === \"ADD\")\n      newState = update(newState, {\n        supplier: { enabledOrders: { $set: { a: true, b: false, c: false } } },\n      });\n    else if (supplier.id === \"IP\")\n      newState = update(newState, {\n        supplier: { enabledOrders: { $set: { a: false, b: true, c: false } } },\n      });\n    else if (supplier.id === \"DP\")\n      newState = update(newState, {\n        supplier: { enabledOrders: { $set: { a: false, b: false, c: true } } },\n      });\n    else\n      newState = update(newState, {\n        supplier: { enabledOrders: { $set: { a: true, b: true, c: true } } },\n      });\n\n    return newState;\n  }\n\n  initWeek() {\n    return this.createWeek();\n  }\n\n  updateWeekstartSupplier(newState, deliveryTime, supplierId, includeWeekend) {\n    let index = this.currentWeekIndex() - deliveryTime;\n    if (index >= 0) {\n      const orders = this.weeks[index].simInput.orders.find(\n        (ele) => ele.supplierId === supplierId\n      );\n      const { stockA, stockB, stockC } =\n        includeWeekend === true\n          ? this.weeks[index].simOutput.weekEnd\n          : { stockA: 0, stockB: 0, stockC: 0 };\n\n      return update(newState, {\n        week: {\n          simOutput: {\n            weekStart: {\n              $set: {\n                stockA:\n                  newState.week.simOutput.weekStart.stockA + orders.a + stockA,\n                stockB:\n                  newState.week.simOutput.weekStart.stockB + orders.b + stockB,\n                stockC:\n                  newState.week.simOutput.weekStart.stockC + orders.c + stockC,\n              },\n            },\n          },\n        },\n      });\n    }\n    return newState;\n  }\n\n  updateWeekstartStock(newWeek) {\n    let week = this.updateWeekstartSupplier({ week: newWeek }, 0, \"ADD\", true)\n      .week;\n    week = this.updateWeekstartSupplier({ week: week }, 0, \"IP\", false).week;\n    week = this.updateWeekstartSupplier({ week: week }, 0, \"DP\", false).week;\n    week = this.updateWeekstartSupplier({ week: week }, 4, \"WWR\", false).week;\n    week = this.updateWeekstartSupplier({ week: week }, 1, \"KW\", false).week;\n\n    return week;\n  }\n\n  advanceSimulation(week) {\n    // Store this week\n    this.weeks.push(week);\n\n    // Create and update the next week\n    let newWeek = this.createWeek();\n\n    newWeek = this.updateWeekstartStock(newWeek);\n    newWeek = this.updateWeekendStock(\n      { week: newWeek },\n      newWeek.simOutput.weekStart,\n      newWeek.simInput.sells\n    ).week;\n    newWeek = this.updateStorageCost(\n      { week: newWeek },\n      newWeek.simOutput.weekStart,\n      newWeek.simOutput.weekEnd\n    ).week;\n\n    // Compute the profit and accumulated profit\n    newWeek = this.updateProfitSubTree({ week: newWeek }).week;\n\n    console.log(this.weeks);\n    return newWeek;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}